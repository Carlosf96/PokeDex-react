{"version":3,"sources":["Pokemon/atoms/Sprites.jsx","entities/Pokemon.jsx","services/PokeService.jsx","shared/atoms/styles/ListStyles.jsx","shared/atoms/styles/SearchStyles.jsx","Pokemon/components/SearchName.jsx","Pokemon/components/SearchType.jsx","Pokemon/components/PokemonSkel.jsx","views/ListViewFactory.jsx","views/HomeViewFactory.jsx","shared/atoms/styles/DetailStyles.jsx","Pokemon/atoms/Abilities.jsx","Pokemon/components/Button.jsx","Pokemon/atoms/Types.jsx","views/DetailViewFactory.jsx","shared/atoms/Header.jsx","Pokemon/Router.jsx","App.js","index.js","serviceWorker.js"],"names":["Sprites","sprite","styl","src","className","alt","pokemonDTO","id","name","t","types","sprites","a","abilities","map","type","front_default","ability","PokeService","getAllPokemons","i","n","finalData","axios","get","res","push","data","console","log","getPokemonById","Promise","resolve","getPokemonByType","useStyles","makeStyles","root","flexGrow","homebutton","display","border","borderRadius","backgroundColor","textDecoration","color","fields","padding","minWidth","theme","container","flexWrap","textField","marginLeft","spacing","marginRight","borderBottomColor","borderColor","menu","width","SearchName","handleSearch","classes","TextField","label","margin","onChange","fullWidth","SearchType","PokeSkelt","highlightColor","duration","count","height","Pokemon","lazy","ListViewFactory","pokeService","useState","error","setError","pokemons","setPokemons","isLoading","setIsLoading","e","val","target","value","toLowerCase","filteredPokemons","filter","p","includes","useEffect","results","Grid","item","xs","message","justify","fallback","pokemon","idx","key","Paper","HomeViewFactory","ListView","card","textTransform","navLinks","Abilities","button","fontSize","Button","props","children","Types","typesArr","reduce","prevType","currentType","slice","join","DetailViewFactory","useParams","React","pokemonDetails","setPokemonDetails","PokemonData","direction","alignItems","to","header","Header","HomeView","DetailView","PokeRouter","match","useRouteMatch","exact","path","component","url","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6cc8b8d.chunk.js","sourcesContent":["import React from 'react';\r\n// import * as url from './pokeBall.jpg';\r\n\r\nconst Sprites = ({sprite, styl}) => {\r\n  return sprite ? (\r\n    <img src={sprite} className={styl} alt=\"pokemon_sprite\" />\r\n  ) : (\r\n    <h1>Loading...</h1>\r\n  );\r\n};\r\n\r\nexport default Sprites;\r\n","const pokemonDTO = ({ id, name, types: t, sprites, abilities: a }) => {\r\n  const types = t.map((t) => t.type.name);\r\n  const sprite = sprites.front_default;\r\n  const abilities = a.map((a) => a.ability.name);\r\n  return {\r\n    id,\r\n    name,\r\n    abilities,\r\n    types,\r\n    sprite,\r\n  };\r\n};\r\n\r\nexport default pokemonDTO;\r\n","import axios from 'axios';\r\nimport pokemonDTO from '../entities/Pokemon';\r\n\r\nconst PokeService = () => {\r\n  const getAllPokemons = async () => {\r\n    let i = 1;\r\n    const n = 150;\r\n    const finalData = [];\r\n\r\n    while (i < n) {\r\n      try {\r\n        const res = await axios.get(`https://pokeapi.co/api/v2/pokemon/${i}`);\r\n        finalData.push(pokemonDTO(res.data));\r\n      } catch (err) {\r\n        console.log(err);\r\n      } finally {\r\n        i++;\r\n      }\r\n    }\r\n\r\n    return finalData;\r\n  };\r\n\r\n  const getPokemonById = async (name) => {\r\n    const res = await axios.get(`https://pokeapi.co/api/v2/pokemon/${name}`);\r\n    return Promise.resolve(pokemonDTO(res.data));\r\n  };\r\n  const getPokemonByType = async (type) => {\r\n    const res = await axios.get(`https://pokeapi.co/api/v2/type/${type}`);\r\n    return Promise.resolve(res.data);\r\n  };\r\n\r\n  return {\r\n    getPokemonById,\r\n    getPokemonByType,\r\n    getAllPokemons,\r\n  };\r\n};\r\n\r\nexport default PokeService;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  homebutton: {\r\n    display: 'inline-block',\r\n    border: '1px solid',\r\n    borderRadius: '2px',\r\n    backgroundColor: 'grey',\r\n    textDecoration: 'none',\r\n    color: 'white',\r\n    '&:hover': {\r\n      backgroundColor: 'black'\r\n    }\r\n  },\r\n  fields: {\r\n    padding: '0px 100px 0px 80px',\r\n    minWidth: '200px'\r\n  }\r\n}));\r\n\r\nexport default useStyles;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    '& label.Mui-focused': {\r\n      color: 'rgb(204, 175, 223)',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: 'rgb(204, 175, 223)',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: 'red',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: 'yellow',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: 'green',\r\n      },\r\n    },\r\n  },\r\n  menu: {\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport useStyles from '../../shared/atoms/styles/SearchStyles';\r\n\r\nconst SearchName = ({handleSearch}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <form >\r\n      <TextField\r\n            id='standard-search'\r\n            label='Search By Name'\r\n            type='search'\r\n            className={classes.textField}\r\n            margin='normal'\r\n            name='Name'\r\n            onChange={handleSearch}\r\n            fullWidth\r\n          >\r\n          </TextField>  \r\n    </form>\r\n  )\r\n}\r\n\r\nexport default SearchName; ","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport useStyles from '../../shared/atoms/styles/SearchStyles';\r\n\r\nconst SearchType = ({handleSearch}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <form onChange={handleSearch}> \r\n      <TextField\r\n            id=\"standard-search\"\r\n            label='Search By Type'\r\n            type=\"search\"\r\n            className={classes.textField}\r\n            margin=\"normal\"\r\n            name='Type'\r\n            onChange={handleSearch}\r\n            fullWidth\r\n          >\r\n          </TextField> \r\n    </form>\r\n  )\r\n}\r\n\r\nexport default SearchType; \r\n","import Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\nimport React from 'react'\r\n\r\n\r\nconst PokeSkelt = () => (\r\n  <SkeletonTheme color=\"#fff\" highlightColor=\"#F2F2F2\">\r\n    <section>\r\n      <Skeleton duration={2} count={50} width={220} padding={20} height={220}/>\r\n    </section>\r\n  </SkeletonTheme>\r\n);\r\n\r\nexport default PokeSkelt;","import React, { lazy, useEffect, useState, Suspense } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport useStyles from '../shared/atoms/styles/ListStyles';\r\nimport SearchName from '../Pokemon/components/SearchName';\r\nimport SearchType from '../Pokemon/components/SearchType';\r\nimport PokeSkelt from '../Pokemon/components/PokemonSkel';\r\nconst Pokemon = lazy(() => import('../Pokemon/components/Pokemon'));\r\n\r\n// Restyle to make images and text more responsive\r\n// add useMemo to fetching data function\r\n\r\nconst ListViewFactory = (pokeService) => {\r\n  const ListView = () => {\r\n    const classes = useStyles();\r\n    const [error, setError] = useState(null);\r\n    const [pokemons, setPokemons] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const handleSearch = (e) => {\r\n      const val = e.target.value.toLowerCase();\r\n      \r\n      const filteredPokemons = pokemons.filter(\r\n        (p) => p.name.includes(val) || p.type.includes(val)\r\n      );\r\n      console.log(val);\r\n      val ? setPokemons(filteredPokemons) : setPokemons(pokemons);\r\n    };\r\n    // const filteredPokemon = useMemo(handleSearch, [pokemons]);\r\n\r\n    useEffect(() => {\r\n      (async () => {\r\n        try {\r\n          const results = await pokeService.getAllPokemons();\r\n          setPokemons(results);\r\n        } catch (err) {\r\n          setError(err);\r\n          console.log(err);\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      })();\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n      return <PokeSkelt />;\r\n    }\r\n    return (\r\n      <Grid container className={classes.root}>\r\n        <Grid item xs={12}>\r\n          <Grid item xs={12} className={classes.fields}>\r\n            <SearchName handleSearch={handleSearch} />\r\n            <SearchType handleSearch={handleSearch} />\r\n            {error && <div>{error.message}</div>}\r\n          </Grid>\r\n          <Grid container spacing={1} justify='center'>\r\n            <Suspense fallback={<h2>...Loading</h2>}>\r\n              {!pokemons ? (\r\n                <h2>No pokemons found!</h2>\r\n              ) : (\r\n                pokemons.map((pokemon, idx) => {\r\n                  return (\r\n                    <Pokemon\r\n                      key={idx}\r\n                      idx={idx}\r\n                      pokemon={pokemon}\r\n                      Grid={Grid}\r\n                      Paper={Paper}\r\n                    />\r\n                  );\r\n                })\r\n              )}\r\n            </Suspense>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  };\r\n  return ListView;\r\n};\r\n\r\nexport default ListViewFactory;\r\n","import React from 'react';\r\n\r\nimport ListViewFactory from '../views/ListViewFactory';\r\n\r\n\r\nconst HomeViewFactory = (pokeService) => {\r\n  const ListView = ListViewFactory(pokeService);\r\n\r\n  const HomeView = () => {\r\n    return (\r\n      <>\r\n        <ListView/>\r\n      </>\r\n    )\r\n  };\r\n\r\n  return HomeView;\r\n}\r\n\r\nexport default HomeViewFactory;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n  },\r\n  card: {\r\n    '& h1': {\r\n      textTransform: 'capitalize',\r\n    },\r\n    minWidth: '500px',\r\n  },\r\n  navLinks: {\r\n    textDecoration: 'none',\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import React from 'react';\r\n\r\nconst Abilities = ({ abilities }) => {\r\n  return abilities ? (\r\n    abilities.map((ability) => <p>{ability}</p>)\r\n  ) : (\r\n    <p>No abilities</p>\r\n  );\r\n};\r\n\r\nexport default Abilities;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  button: {\r\n    color: 'rgb(177, 90, 234)',\r\n    border: '1px solid rgb(204, 175, 223)',\r\n    textDecoration: 'none',\r\n    fontSize: 18,\r\n    borderRadius: '2px',\r\n    '&:hover': {\r\n      backgroundColor: 'rgb(204,175,223)',\r\n      color: 'white',\r\n    },\r\n    '& a': {\r\n      color: 'inherit',\r\n      textDecoration: 'none',\r\n    },\r\n  },\r\n}));\r\n\r\nconst Button = (props) => {\r\n  const classes = useStyles();\r\n  return <div className={classes.button}>{props.children}</div>;\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nconst Types = ({ types }) => {\r\n  const formatTypes = (typesArr) =>\r\n    [\r\n      ...typesArr.reduce(\r\n        (prevType, currentType) => prevType + '/' + currentType,\r\n        ''\r\n      ),\r\n    ]\r\n      .slice(1)\r\n      .join('');\r\n  return types ? <p>{formatTypes(types)}</p> : <p>No types</p>;\r\n};\r\n\r\nexport default Types;\r\n","import React, { useEffect } from 'react';\r\nimport { Paper, Grid } from '@material-ui/core/';\r\nimport { useParams, Link } from 'react-router-dom';\r\n\r\nimport useStyles from '../shared/atoms/styles/DetailStyles';\r\nimport Abilities from '../Pokemon/atoms/Abilities';\r\nimport Button from '../Pokemon/components/Button';\r\nimport Sprites from '../Pokemon/atoms/Sprites';\r\nimport Types from '../Pokemon/atoms/Types';\r\nimport '../App.css';\r\n\r\nconst DetailViewFactory = (pokeService) => {\r\n  const DetailView = () => {\r\n    const classes = useStyles();\r\n    const { name } = useParams();\r\n    const [pokemonDetails, setPokemonDetails] = React.useState({});\r\n    console.log(name, 'name param');\r\n    const { abilities, sprite, types } = pokemonDetails;\r\n    useEffect(() => {\r\n      (async () => {\r\n        const PokemonData = await pokeService.getPokemonById(name);\r\n        setPokemonDetails(PokemonData);\r\n      })();\r\n    }, [name]);\r\n    console.log(pokemonDetails, 'pokemon details');\r\n    console.log('Should not render this view at home');\r\n    return (\r\n      <Grid\r\n        container\r\n        direction='row'\r\n        justify='center'\r\n        alignItems='center'\r\n        className={classes.root}\r\n      >\r\n        <Link className={classes.navLinks} to={`/${pokemonDetails.id - 1}`}>\r\n          <Button>Back</Button>\r\n        </Link>\r\n        <Paper className={classes.card}>\r\n          <h1>A {pokemonDetails.name}</h1>\r\n          <Sprites sprite={sprite} />\r\n          <h2>National Dex Number</h2>\r\n          <p>{pokemonDetails.id}</p>\r\n          <h2>Abilities</h2>\r\n          <Abilities abilities={abilities} />\r\n          <h2>Types</h2>\r\n          <Types types={types} />\r\n        </Paper>\r\n        <Link className={classes.navLinks} to={`/${pokemonDetails.id + 1}`}>\r\n          <Button>Next</Button>\r\n        </Link>\r\n      </Grid>\r\n    );\r\n  };\r\n  return DetailView;\r\n};\r\n\r\nexport default DetailViewFactory;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  header: {\r\n    fontSize: '24px',\r\n    color: 'inherit',\r\n    textDecoration: 'none',\r\n  },\r\n}));\r\n\r\nconst Header = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Link to='/' className={classes.header}>\r\n      <h1>PokeDex</h1>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\r\n\r\nimport PokeService from '../services/PokeService';\r\nimport HomeViewFactory from '../views/HomeViewFactory';\r\nimport DetailViewFactory from '../views/DetailViewFactory';\r\nimport Header from '../shared/atoms/Header';\r\nconst pokeService = PokeService();\r\nconst HomeView = HomeViewFactory(pokeService);\r\nconst DetailView = DetailViewFactory(pokeService);\r\n\r\nconst PokeRouter = () => {\r\n  const match = useRouteMatch();\r\n  return (\r\n    <div className='App '>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path={`/PokeDex-react/`} component={HomeView} />\r\n        <Route path={`${match.url}:name`} component={DetailView} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokeRouter;\r\n","import React from 'react';\r\nimport {BrowserRouter as Router ,Route, Switch} from 'react-router-dom';\r\nimport PokeRouter from './Pokemon/Router';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n        <Switch>\r\n          <Route path='/' component={PokeRouter}/>\r\n        </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n// const isLocalhost = Boolean(\r\n//   window.location.hostname === 'localhost' ||\r\n//     // [::1] is the IPv6 localhost address.\r\n//     window.location.hostname === '[::1]' ||\r\n//     // 127.0.0.1/8 is considered localhost for IPv4.\r\n//     window.location.hostname.match(\r\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n//     )\r\n// );\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'development' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/serviceWorker.js`;\r\n\r\n      // if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      // } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      // }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}